{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\phani.kumar.vankadar\\\\OneDrive - Sofigate Oy\\\\phani\\\\cms\\\\hack\\\\VitoCMS2\\\\src\\\\views\\\\App\\\\Todo\\\\ProjectList\\\\index.js\";\n\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\nimport { Card, CardBody, Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { connect } from \"react-redux\";\nimport { getCategories, getProjects, selectedCategoryIndex, selectedProjectIndex } from \"../../../../store/selectors/todoSelector\";\nimport { Formik } from 'formik';\nimport * as Yup from \"yup\";\nimport uuid from 'react-uuid';\nimport { bindActionCreators } from 'redux';\nimport { addProjectAction, selectedProjectAction, selectedCategoryAction } from \"../../../../store/actions/projectAction\";\n\nfunction mapStateToProps(state) {\n  return {\n    selectedProject: selectedProjectIndex(state),\n    projects: getProjects(state),\n    selectedCategory: selectedCategoryIndex(state),\n    categories: getCategories(state)\n  };\n}\n\nconst mapDispatchToProps = dispatch => ({ ...bindActionCreators({\n    addProjectAction,\n    selectedProjectAction,\n    selectedCategoryAction\n  }, dispatch)\n});\n\nclass Index extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      searchProject: '',\n      modal: false\n    };\n\n    this.toggleModal = () => {\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      className: 'iq-card',\n      children: [/*#__PURE__*/_jsxDEV(CardBody, {\n        className: 'iq-card-body',\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"iq-todo-page\",\n          children: [/*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"form-group position-relative\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-0\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: \"form-control todo-search\",\n                placeholder: \"Search\",\n                onChange: e => this.setState({\n                  searchProject: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                className: \"search-link\",\n                href: \"#\",\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"ri-search-line\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 61,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"add-new-project mt-3 mb-3\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"#\",\n              className: \"d-block nrw-project\",\n              onClick: this.toggleModal,\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"ri-add-line mr-2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 33\n              }, this), \" Add Project\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"todo-task-list p-0 m-0\",\n            children: this.props.projects.filter(project => project.name.toLowerCase().includes(this.state.searchProject.toLowerCase())).map((project, projectIndex) => {\n              return /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [/*#__PURE__*/_jsxDEV(\"a\", {\n                  href: \"#\",\n                  onClick: () => this.props.selectedProjectAction(projectIndex),\n                  children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"ri-stack-fill mr-2\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 75,\n                    columnNumber: 41\n                  }, this), \" \", project.name]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 74,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  className: 'sub-task mt-2 p-0 ' + (this.props.selectedProject === projectIndex ? 'show' : ''),\n                  children: this.props.categories.map((category, categoryIndex) => {\n                    return /*#__PURE__*/_jsxDEV(\"li\", {\n                      className: this.props.selectedCategory === categoryIndex ? 'active' : '',\n                      children: /*#__PURE__*/_jsxDEV(\"a\", {\n                        href: \"#\",\n                        onClick: () => this.props.selectedCategoryAction(categoryIndex),\n                        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                          className: 'ri-checkbox-blank-circle-fill text-' + category.color\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 85,\n                          columnNumber: 53\n                        }, this), ' ' + category.name, /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: 'badge ml-2 float-right badge-' + category.color,\n                          children: category.taskNewCount\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 87,\n                          columnNumber: 53\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 84,\n                        columnNumber: 49\n                      }, this)\n                    }, categoryIndex, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 81,\n                      columnNumber: 52\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 37\n                }, this)]\n              }, projectIndex, true, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 40\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: this.state.modal,\n        toggle: this.toggleModal,\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            name: ''\n          },\n          onSubmit: async values => {\n            await new Promise(resolve => setTimeout(resolve, 500));\n            values.id = uuid();\n            this.props.addProjectAction(values);\n            this.toggleModal();\n          },\n          validationSchema: Yup.object().shape({\n            name: Yup.string().required(\"Required\")\n          }),\n          children: ({\n            values,\n            errors,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n            isSubmitting\n          }) => /*#__PURE__*/_jsxDEV(\"form\", {\n            noValidate: true,\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n              children: [\"Add Project \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-danger\",\n                children: \"*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 58\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"position-relative\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"form-group\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    id: \"name\",\n                    type: \"text\",\n                    className: 'form-control ' + (errors.name ? 'is-invalid' : ''),\n                    required: true,\n                    placeholder: \"Enter Project Name\",\n                    onChange: handleChange,\n                    onBlur: handleBlur,\n                    value: values.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 131,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"invalid-feedback\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Project name is required.\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 140,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 139,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                color: \"primary\",\n                disabled: isSubmitting,\n                children: \"Save Project\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 37\n              }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n                color: \"secondary\",\n                onClick: this.toggleModal,\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Index);","map":{"version":3,"sources":["C:/Users/phani.kumar.vankadar/OneDrive - Sofigate Oy/phani/cms/hack/VitoCMS2/src/views/App/Todo/ProjectList/index.js"],"names":["React","Card","CardBody","Button","Modal","ModalHeader","ModalBody","ModalFooter","connect","getCategories","getProjects","selectedCategoryIndex","selectedProjectIndex","Formik","Yup","uuid","bindActionCreators","addProjectAction","selectedProjectAction","selectedCategoryAction","mapStateToProps","state","selectedProject","projects","selectedCategory","categories","mapDispatchToProps","dispatch","Index","Component","searchProject","modal","toggleModal","setState","render","e","target","value","props","filter","project","name","toLowerCase","includes","map","projectIndex","category","categoryIndex","color","taskNewCount","values","Promise","resolve","setTimeout","id","object","shape","string","required","errors","handleChange","handleBlur","handleSubmit","isSubmitting"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,IAAR,EAAcC,QAAd,EAAwBC,MAAxB,EAAgCC,KAAhC,EAAuCC,WAAvC,EAAoDC,SAApD,EAA+DC,WAA/D,QAAiF,YAAjF;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SACIC,aADJ,EAEIC,WAFJ,EAGIC,qBAHJ,EAIIC,oBAJJ,QAKO,0CALP;AAMA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,gBAAT,EAA2BC,qBAA3B,EAAkDC,sBAAlD,QAAgF,yCAAhF;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC5B,SAAO;AACHC,IAAAA,eAAe,EAAEV,oBAAoB,CAACS,KAAD,CADlC;AAEHE,IAAAA,QAAQ,EAAEb,WAAW,CAACW,KAAD,CAFlB;AAGHG,IAAAA,gBAAgB,EAAEb,qBAAqB,CAACU,KAAD,CAHpC;AAIHI,IAAAA,UAAU,EAAEhB,aAAa,CAACY,KAAD;AAJtB,GAAP;AAMH;;AAED,MAAMK,kBAAkB,GAAGC,QAAQ,KAAK,EACpC,GAAGX,kBAAkB,CACjB;AACIC,IAAAA,gBADJ;AAEIC,IAAAA,qBAFJ;AAGIC,IAAAA;AAHJ,GADiB,EAMjBQ,QANiB;AADe,CAAL,CAAnC;;AAWA,MAAMC,KAAN,SAAoB5B,KAAK,CAAC6B,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAEhCR,KAFgC,GAExB;AACJS,MAAAA,aAAa,EAAE,EADX;AAEJC,MAAAA,KAAK,EAAE;AAFH,KAFwB;;AAAA,SAOhCC,WAPgC,GAOlB,MAAM;AAChB,WAAKC,QAAL,CAAc;AAACF,QAAAA,KAAK,EAAE,CAAC,KAAKV,KAAL,CAAWU;AAApB,OAAd;AACH,KAT+B;AAAA;;AAWhCG,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,IAAD;AAAM,MAAA,SAAS,EAAE,SAAjB;AAAA,8BACI,QAAC,QAAD;AAAU,QAAA,SAAS,EAAE,cAArB;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACI;AAAM,YAAA,SAAS,EAAC,8BAAhB;AAAA,mCACI;AAAK,cAAA,SAAS,EAAC,MAAf;AAAA,sCACI;AAAO,gBAAA,IAAI,EAAC,MAAZ;AACQ,gBAAA,SAAS,EAAC,0BADlB;AAC8C,gBAAA,WAAW,EAAC,QAD1D;AAEQ,gBAAA,QAAQ,EAAIC,CAAD,IACP,KAAKF,QAAL,CAAc;AAACH,kBAAAA,aAAa,EAAEK,CAAC,CAACC,MAAF,CAASC;AAAzB,iBAAd;AAHZ;AAAA;AAAA;AAAA;AAAA,sBADJ,eAMI;AAAG,gBAAA,SAAS,EAAC,aAAb;AAA2B,gBAAA,IAAI,EAAC,GAAhC;AAAA,uCACI;AAAG,kBAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,sBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ,eAaI;AAAK,YAAA,SAAS,EAAC,2BAAf;AAAA,mCACI;AAAG,cAAA,IAAI,EAAC,GAAR;AAAY,cAAA,SAAS,EAAC,qBAAtB;AAA4C,cAAA,OAAO,EAAE,KAAKL,WAA1D;AAAA,sCACI;AAAG,gBAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,sBADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAbJ,eAkBI;AAAI,YAAA,SAAS,EAAC,wBAAd;AAAA,sBACK,KAAKM,KAAL,CAAWf,QAAX,CAAoBgB,MAApB,CAA2BC,OAAO,IAAIA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,CAAoC,KAAKtB,KAAL,CAAWS,aAAX,CAAyBY,WAAzB,EAApC,CAAtC,EACIE,GADJ,CACQ,CAACJ,OAAD,EAAUK,YAAV,KAA2B;AAChC,kCAAO;AAAA,wCACH;AAAG,kBAAA,IAAI,EAAC,GAAR;AAAY,kBAAA,OAAO,EAAG,MAAM,KAAKP,KAAL,CAAWpB,qBAAX,CAAiC2B,YAAjC,CAA5B;AAAA,0CACI;AAAG,oBAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,0BADJ,OAC6CL,OAAO,CAACC,IADrD;AAAA;AAAA;AAAA;AAAA;AAAA,wBADG,eAIH;AAAI,kBAAA,SAAS,EAAE,wBACV,KAAKH,KAAL,CAAWhB,eAAX,KAA+BuB,YAA/B,GAA8C,MAA9C,GAAuD,EAD7C,CAAf;AAAA,4BAGK,KAAKP,KAAL,CAAWb,UAAX,CAAsBmB,GAAtB,CAA0B,CAACE,QAAD,EAAWC,aAAX,KAA6B;AACpD,wCAAO;AAAwB,sBAAA,SAAS,EACnC,KAAKT,KAAL,CAAWd,gBAAX,KAAgCuB,aAAhC,GAAgD,QAAhD,GAA2D,EADzD;AAAA,6CAGH;AAAG,wBAAA,IAAI,EAAC,GAAR;AAAY,wBAAA,OAAO,EAAG,MAAM,KAAKT,KAAL,CAAWnB,sBAAX,CAAkC4B,aAAlC,CAA5B;AAAA,gDACI;AAAG,0BAAA,SAAS,EAAG,wCAAsCD,QAAQ,CAACE;AAA9D;AAAA;AAAA;AAAA;AAAA,gCADJ,EAEM,MAAMF,QAAQ,CAACL,IAFrB,eAGI;AAAM,0BAAA,SAAS,EAAE,kCAAgCK,QAAQ,CAACE,KAA1D;AAAA,oCACMF,QAAQ,CAACG;AADf;AAAA;AAAA;AAAA;AAAA,gCAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAHG,uBAASF,aAAT;AAAA;AAAA;AAAA;AAAA,4BAAP;AAWH,mBAZA;AAHL;AAAA;AAAA;AAAA;AAAA,wBAJG;AAAA,iBAASF,YAAT;AAAA;AAAA;AAAA;AAAA,sBAAP;AAyBH,aA3BA;AADL;AAAA;AAAA;AAAA;AAAA,kBAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAoDI,QAAC,KAAD;AAAO,QAAA,MAAM,EAAE,KAAKxB,KAAL,CAAWU,KAA1B;AAAiC,QAAA,MAAM,EAAE,KAAKC,WAA9C;AAAA,+BACI,QAAC,MAAD;AACI,UAAA,aAAa,EAAE;AAAES,YAAAA,IAAI,EAAE;AAAR,WADnB;AAEI,UAAA,QAAQ,EAAE,MAAMS,MAAN,IAAgB;AACtB,kBAAM,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAU,GAAV,CAAjC,CAAN;AACAF,YAAAA,MAAM,CAACI,EAAP,GAAYvC,IAAI,EAAhB;AACA,iBAAKuB,KAAL,CAAWrB,gBAAX,CAA4BiC,MAA5B;AAEA,iBAAKlB,WAAL;AACH,WARL;AASI,UAAA,gBAAgB,EACZlB,GAAG,CAACyC,MAAJ,GAAaC,KAAb,CAAmB;AACff,YAAAA,IAAI,EAAE3B,GAAG,CAAC2C,MAAJ,GAAaC,QAAb,CAAsB,UAAtB;AADS,WAAnB,CAVR;AAAA,oBAeK,CAAC;AACIR,YAAAA,MADJ;AAEIS,YAAAA,MAFJ;AAGIC,YAAAA,YAHJ;AAIIC,YAAAA,UAJJ;AAKIC,YAAAA,YALJ;AAMIC,YAAAA;AANJ,WAAD,kBAQG;AAAM,YAAA,UAAU,MAAhB;AAAiB,YAAA,QAAQ,EAAED,YAA3B;AAAA,oCACI,QAAC,WAAD;AAAA,sDAAyB;AAAM,gBAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,SAAD;AAAA,qCACI;AAAK,gBAAA,SAAS,EAAC,mBAAf;AAAA,uCACI;AAAK,kBAAA,SAAS,EAAC,YAAf;AAAA,0CACI;AAAO,oBAAA,EAAE,EAAC,MAAV;AAAiB,oBAAA,IAAI,EAAC,MAAtB;AACO,oBAAA,SAAS,EAAE,mBACTH,MAAM,CAAClB,IAAP,GAAc,YAAd,GAA6B,EADpB,CADlB;AAGO,oBAAA,QAAQ,MAHf;AAIO,oBAAA,WAAW,EAAC,oBAJnB;AAKO,oBAAA,QAAQ,EAAEmB,YALjB;AAMO,oBAAA,MAAM,EAAEC,UANf;AAOO,oBAAA,KAAK,EAAEX,MAAM,CAACT;AAPrB;AAAA;AAAA;AAAA;AAAA,0BADJ,eASI;AAAK,oBAAA,SAAS,EAAC,kBAAf;AAAA,2CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,0BATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAmBI,QAAC,WAAD;AAAA,sCACI,QAAC,MAAD;AAAQ,gBAAA,KAAK,EAAC,SAAd;AAAwB,gBAAA,QAAQ,EAAEsB,YAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAC0E,GAD1E,eAEI,QAAC,MAAD;AAAQ,gBAAA,KAAK,EAAC,WAAd;AAA0B,gBAAA,OAAO,EAAE,KAAK/B,WAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAvBR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cApDJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA2GH;;AAvH+B;;AA0HpC,eAAexB,OAAO,CAACY,eAAD,EAAkBM,kBAAlB,CAAP,CAA6CE,KAA7C,CAAf","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from 'react';\r\nimport {Card, CardBody, Button, Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getCategories,\r\n    getProjects,\r\n    selectedCategoryIndex,\r\n    selectedProjectIndex\r\n} from \"../../../../store/selectors/todoSelector\";\r\nimport { Formik } from 'formik';\r\nimport * as Yup from \"yup\";\r\nimport uuid from 'react-uuid';\r\nimport { bindActionCreators } from 'redux'\r\nimport { addProjectAction, selectedProjectAction, selectedCategoryAction } from \"../../../../store/actions/projectAction\";\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        selectedProject: selectedProjectIndex(state),\r\n        projects: getProjects(state),\r\n        selectedCategory: selectedCategoryIndex(state),\r\n        categories: getCategories(state)\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    ...bindActionCreators(\r\n        {\r\n            addProjectAction,\r\n            selectedProjectAction,\r\n            selectedCategoryAction\r\n        },\r\n        dispatch\r\n    )\r\n})\r\n\r\nclass Index extends React.Component {\r\n\r\n    state = {\r\n        searchProject: '',\r\n        modal: false\r\n    };\r\n\r\n    toggleModal = () => {\r\n        this.setState({modal: !this.state.modal});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card className={'iq-card'}>\r\n                <CardBody className={'iq-card-body'}>\r\n                    <div className=\"iq-todo-page\">\r\n                        <form className=\"form-group position-relative\">\r\n                            <div className=\"mb-0\">\r\n                                <input type=\"text\"\r\n                                        className=\"form-control todo-search\"  placeholder=\"Search\"\r\n                                        onChange={ (e) =>\r\n                                            this.setState({searchProject: e.target.value})\r\n                                        } />\r\n                                <a className=\"search-link\" href=\"#\">\r\n                                    <i className=\"ri-search-line\"></i>\r\n                                </a>\r\n                            </div>\r\n                        </form>\r\n                        <div className=\"add-new-project mt-3 mb-3\">\r\n                            <a href='#' className=\"d-block nrw-project\" onClick={this.toggleModal}>\r\n                                <i className=\"ri-add-line mr-2\"></i> Add Project\r\n                            </a>\r\n                        </div>\r\n                        <ul className=\"todo-task-list p-0 m-0\">\r\n                            {this.props.projects.filter(project => project.name.toLowerCase().includes(this.state.searchProject.toLowerCase()))\r\n                                .map((project, projectIndex) => {\r\n                                return <li key={projectIndex}>\r\n                                    <a href='#' onClick={ () => this.props.selectedProjectAction(projectIndex) }>\r\n                                        <i className=\"ri-stack-fill mr-2\"></i> { project.name }\r\n                                    </a>\r\n                                    <ul className={'sub-task mt-2 p-0 '+\r\n                                        (this.props.selectedProject === projectIndex ? 'show' : '')}>\r\n\r\n                                        {this.props.categories.map((category, categoryIndex) => {\r\n                                            return <li key={categoryIndex} className={\r\n                                                (this.props.selectedCategory === categoryIndex ? 'active' : '')\r\n                                            }>\r\n                                                <a href='#' onClick={ () => this.props.selectedCategoryAction(categoryIndex) }>\r\n                                                    <i className={ 'ri-checkbox-blank-circle-fill text-'+category.color }></i>\r\n                                                    { ' ' + category.name }\r\n                                                    <span className={'badge ml-2 float-right badge-'+category.color}>\r\n                                                        { category.taskNewCount }\r\n                                                    </span>\r\n                                                </a>\r\n                                            </li>\r\n                                        })}\r\n\r\n\r\n\r\n                                    </ul>\r\n                                </li>\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n                </CardBody>\r\n                <Modal isOpen={this.state.modal} toggle={this.toggleModal}>\r\n                    <Formik\r\n                        initialValues={{ name: '' }}\r\n                        onSubmit={async values => {\r\n                            await new Promise(resolve => setTimeout(resolve, 500));\r\n                            values.id = uuid();\r\n                            this.props.addProjectAction(values);\r\n\r\n                            this.toggleModal();\r\n                        }}\r\n                        validationSchema={\r\n                            Yup.object().shape({\r\n                                name: Yup.string().required(\"Required\")\r\n                            })\r\n                        }\r\n                    >\r\n                        {({\r\n                              values,\r\n                              errors,\r\n                              handleChange,\r\n                              handleBlur,\r\n                              handleSubmit,\r\n                              isSubmitting\r\n                        }) => (\r\n                            <form noValidate onSubmit={handleSubmit}>\r\n                                <ModalHeader>Add Project <span className=\"text-danger\">*</span></ModalHeader>\r\n                                <ModalBody>\r\n                                    <div className=\"position-relative\">\r\n                                        <div className='form-group' >\r\n                                            <input id=\"name\" type=\"text\"\r\n                                                   className={'form-control '+\r\n                                                    (errors.name ? 'is-invalid' : '')}\r\n                                                   required\r\n                                                   placeholder=\"Enter Project Name\"\r\n                                                   onChange={handleChange}\r\n                                                   onBlur={handleBlur}\r\n                                                   value={values.name} />\r\n                                            <div className=\"invalid-feedback\">\r\n                                                <span>Project name is required.</span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </ModalBody>\r\n                                <ModalFooter>\r\n                                    <Button color=\"primary\" disabled={isSubmitting}>Save Project</Button>{' '}\r\n                                    <Button color=\"secondary\" onClick={this.toggleModal}>Cancel</Button>\r\n                                </ModalFooter>\r\n                            </form>\r\n                        )}\r\n                    </Formik>\r\n\r\n                </Modal>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Index);\r\n"]},"metadata":{},"sourceType":"module"}