{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\phani.kumar.vankadar\\\\OneDrive - Sofigate Oy\\\\phani\\\\cms\\\\hack\\\\VitoCMS2\\\\src\\\\components\\\\vito\\\\chartStyle\\\\apexLiveChart\\\\index.js\";\nimport React from 'react';\nimport ApexCharts from 'apexcharts';\n\nclass Index extends React.Component {\n  /*constructor(props) {\r\n      super(props);\r\n  }*/\n  componentDidMount() {\n    const {\n      element,\n      elementType,\n      chartOption,\n      speed\n    } = this.props;\n    let selector = '';\n    let temp = {\n      lastDate: 0,\n      data: []\n    };\n\n    if (elementType === 'class') {\n      selector = '.' + element;\n    } else {\n      selector = '#' + element;\n    }\n\n    let chart = new ApexCharts(document.querySelector(selector), chartOption);\n    chart.render();\n\n    function getNewData(baseval, yrange, data) {\n      let TICKINTERVAL = 86400000;\n      let XAXISRANGE = 777600000;\n      let newDate = baseval + TICKINTERVAL;\n\n      for (let i = 0; i < data.length - 10; i++) {\n        data[i].x = newDate - XAXISRANGE - TICKINTERVAL;\n        data[i].y = 0;\n      }\n\n      data.push({\n        x: newDate,\n        y: Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min\n      });\n      return {\n        data: data,\n        lastDate: newDate\n      };\n    }\n\n    for (let i = 0; i < 10; i++) {\n      temp = getNewData(temp.lastDate, {\n        min: 10,\n        max: 90\n      }, temp.data);\n    }\n\n    chart.updateSeries([{\n      data: temp.data\n    }]);\n    setInterval(function () {\n      temp = getNewData(temp.lastDate, {\n        min: 10,\n        max: 90\n      }, temp.data);\n      chart.updateSeries([{\n        data: temp.data\n      }]);\n    }, parseInt(speed));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: this.props.element\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/phani.kumar.vankadar/OneDrive - Sofigate Oy/phani/cms/hack/VitoCMS2/src/components/vito/chartStyle/apexLiveChart/index.js"],"names":["React","ApexCharts","Index","Component","componentDidMount","element","elementType","chartOption","speed","props","selector","temp","lastDate","data","chart","document","querySelector","render","getNewData","baseval","yrange","TICKINTERVAL","XAXISRANGE","newDate","i","length","x","y","push","Math","floor","random","max","min","updateSeries","setInterval","parseInt"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ApexCharts from 'apexcharts'\r\n\r\nclass Index extends React.Component {\r\n    /*constructor(props) {\r\n        super(props);\r\n    }*/\r\n\r\n    componentDidMount() {\r\n        const { element, elementType, chartOption, speed} = this.props;\r\n        let selector = '';\r\n        let temp={lastDate:0,data:[]};\r\n\r\n        if (elementType === 'class') {\r\n            selector = '.' + element;\r\n        } else {\r\n            selector = '#' + element;\r\n        }\r\n\r\n        let chart = new ApexCharts(document.querySelector(selector), chartOption);\r\n        chart.render();\r\n\r\n        function getNewData(baseval, yrange,data) {\r\n            let TICKINTERVAL = 86400000;\r\n            let XAXISRANGE = 777600000;\r\n            let newDate = baseval + TICKINTERVAL;\r\n            for (let i = 0; i < data.length - 10; i++) {\r\n                data[i].x = newDate - XAXISRANGE - TICKINTERVAL;\r\n                data[i].y = 0;\r\n            }\r\n            data.push({\r\n                x: newDate,\r\n                y: Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min\r\n            });\r\n            return {data:data,lastDate:newDate};\r\n        }\r\n\r\n        for(let i=0;i<10;i++){\r\n            temp = getNewData(temp.lastDate, {\r\n                min: 10,\r\n                max: 90\r\n            },temp.data);\r\n        }\r\n        chart.updateSeries([{\r\n            data: temp.data\r\n        }]);\r\n\r\n        setInterval(function () {\r\n            temp = getNewData(temp.lastDate, {\r\n                min: 10,\r\n                max: 90\r\n            },temp.data);\r\n            chart.updateSeries([{\r\n                data: temp.data\r\n            }]);\r\n        },parseInt(speed));\r\n    }\r\n\r\n\r\n    render() {\r\n        return (<div id={this.props.element} />)\r\n    }\r\n}\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}